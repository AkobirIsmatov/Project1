const jsBytes = Uint8Array.from(atob('Y29uc3Qgc2tpbGxJY29ucyA9IHsKICBQeXRob246ICdmYS1icmFuZHMgZmEtcHl0aG9uJywKICBCYXNoOiAnZmEtc29saWQgZmEtdGVybWluYWwnLAogIEF1dG9tYXRpb246ICdmYS1zb2xpZCBmYS1yb2JvdCcsCiAgU2NyaXB0aW5nOiAnZmEtc29saWQgZmEtY29kZScsCiAgU0lFTTogJ2ZhLXNvbGlkIGZhLWV5ZScsCiAgUk1NOiAnZmEtc29saWQgZmEtc2NyZXdkcml2ZXItd3JlbmNoJywKICAnSURTL0lQUyc6ICdmYS1zb2xpZCBmYS1zaGllbGQtaGFsdmVkJywKICAnRURSL1hEUic6ICdmYS1zb2xpZCBmYS1zaGllbGQtaGFsdmVkJywKICAnQ29tcHV0ZXIgVmlzaW9uJzogJ2ZhLXNvbGlkIGZhLWV5ZScsCiAgJ1ImRCc6ICdmYS1zb2xpZCBmYS1mbGFzaycsCiAgJ0FydGlmaWNpYWwgSW50ZWxsaWdlbmNlJzogJ2ZhLXNvbGlkIGZhLWJyYWluJywKICBMTE1zOiAnZmEtc29saWQgZmEtYnJhaW4nLAogICdEZWVwIExlYXJuaW5nJzogJ2ZhLXNvbGlkIGZhLWxheWVyLWdyb3VwJywKICAnTWFjaGluZSBMZWFybmluZyc6ICdmYS1zb2xpZCBmYS1nZWFycycsCiAgJ05ldHdvcmsgU2VjdXJpdHknOiAnZmEtc29saWQgZmEtbmV0d29yay13aXJlZCcsCiAgQ3liZXJzZWN1cml0eTogJ2ZhLXNvbGlkIGZhLXVzZXItc2hpZWxkJywKICAnRGF0YSBBbmFseXRpY3MnOiAnZmEtc29saWQgZmEtY2hhcnQtbGluZScsCiAgQmxvY2tjaGFpbjogJ2ZhLWJyYW5kcyBmYS1iaXRjb2luJywKICBDcnlwdG86ICdmYS1zb2xpZCBmYS1jb2lucycKfTsKCmNvbnN0IHJvbGVJY29ucyA9IHsKICAnQ3liZXJzZWN1cml0eSBTcGVjaWFsaXN0JzogJ2ZhLXNvbGlkIGZhLXVzZXItc2hpZWxkJywKICAnU2VuaW9yIFNvZnR3YXJlIEVuZ2luZWVyJzogJ2ZhLXNvbGlkIGZhLWNvZGUnLAogICdOZXR3b3JrIGFuZCBTZWN1cml0eSBSZXNlYXJjaGVyJzogJ2ZhLXNvbGlkIGZhLWZsYXNrJywKICAnRm9yZW5zaWNzIEFuYWx5c3QnOiAnZmEtc29saWQgZmEtbWFnbmlmeWluZy1nbGFzcycsCiAgJ0xhYiBBc3Npc3RhbnQnOiAnZmEtc29saWQgZmEtdmlhbHMnCn07Cgpjb25zdCB0cmFja1ByZXZpb3VzID0gKGVsKSA9PiB7CiAgY29uc3QgcmFkaW9zID0gZWwucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT0icmFkaW8iXScpOwogIGxldCBwcmV2aW91c1ZhbHVlID0gbnVsbDsKCiAgY29uc3QgaW5pdGlhbGx5Q2hlY2tlZCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9InJhZGlvIl06Y2hlY2tlZCcpOwogIGlmIChpbml0aWFsbHlDaGVja2VkKSB7CiAgICBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbGx5Q2hlY2tlZC5nZXRBdHRyaWJ1dGUoJ2Mtb3B0aW9uJyk7CiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2MtcHJldmlvdXMnLCBwcmV2aW91c1ZhbHVlKTsKICB9CgogIHJhZGlvcy5mb3JFYWNoKHJhZGlvID0+IHsKICAgIHJhZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHsKICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHsKICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2MtcHJldmlvdXMnLCBwcmV2aW91c1ZhbHVlID8/ICcnKTsKICAgICAgICBwcmV2aW91c1ZhbHVlID0gcmFkaW8uZ2V0QXR0cmlidXRlKCdjLW9wdGlvbicpOwogICAgICB9CiAgICB9KTsKICB9KTsKfTsKCmNvbnN0IHByb2ZpbGVJY29ucyA9IHsKICBHaXRIdWI6ICdmYS1icmFuZHMgZmEtZ2l0aHViJywKICBMaW5rZWRJbjogJ2ZhLWJyYW5kcyBmYS1saW5rZWRpbicsCiAgVHJ5SGFja01lOiAnZmEtc29saWQgZmEtdXNlci1zZWNyZXQnCn07CgpmdW5jdGlvbiBnZXRTa2lsbEljb24oc2tpbGwpIHsKICByZXR1cm4gc2tpbGxJY29uc1tza2lsbF0gfHwgJ2ZhLXNvbGlkIGZhLWNpcmNsZSc7Cn0KCmZ1bmN0aW9uIGdldFJvbGVJY29uKHRpdGxlKSB7CiAgZm9yIChjb25zdCBba2V5LCBpY29uXSBvZiBPYmplY3QuZW50cmllcyhyb2xlSWNvbnMpKSB7CiAgICBpZiAodGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhrZXkudG9Mb3dlckNhc2UoKSkpIHsKICAgICAgcmV0dXJuIGljb247CiAgICB9CiAgfQogIHJldHVybiAnZmEtc29saWQgZmEtYnJpZWZjYXNlJzsKfQoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHsKICBjb25zdCBzd2l0Y2hlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zd2l0Y2hlcicpOwogIGlmIChzd2l0Y2hlcikgewogICAgY29uc3QgcmFkaW9zID0gc3dpdGNoZXIucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT0icmFkaW8iXScpOwogICAgY29uc3Qgc3RvcmVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lJykgfHwgJ2RhcmsnOwogICAgY29uc3QgYWN0aXZlID0gc3dpdGNoZXIucXVlcnlTZWxlY3RvcihgaW5wdXRbdmFsdWU9IiR7c3RvcmVkfSJdYCk7CiAgICBpZiAoYWN0aXZlKSBhY3RpdmUuY2hlY2tlZCA9IHRydWU7CiAgICBpZiAoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpKSB7CiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsICdkYXJrJyk7CiAgICB9CiAgICB0cmFja1ByZXZpb3VzKHN3aXRjaGVyKTsKICAgIHJhZGlvcy5mb3JFYWNoKHJhZGlvID0+IHsKICAgICAgcmFkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4gewogICAgICAgIGlmIChyYWRpby5jaGVja2VkKSB7CiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCByYWRpby52YWx1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0KCiAgY29uc3QgeWVhclNwYW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudC15ZWFyJyk7CiAgaWYgKHllYXJTcGFuKSB7CiAgICB5ZWFyU3Bhbi50ZXh0Q29udGVudCA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTsKICB9CgogICAgZmV0Y2goJ0NWX2luZm8uanNvbicpCiAgICAgIC50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKCFyZXMub2spIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIENWX2luZm8uanNvbjogJHtyZXMuc3RhdHVzfWApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzLmpzb24oKTsKICAgICAgfSkKICAgICAgLnRoZW4oZGF0YSA9PiBwb3B1bGF0ZShkYXRhKSkKICAgICAgLmNhdGNoKGVyciA9PiB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBDVl9pbmZvLmpzb246JywgZXJyKTsKICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1jb250ZW50Jyk7CiAgICAgICAgaWYgKGNvbnRhaW5lcikgewogICAgICAgICAgY29uc3QgbXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOwogICAgICAgICAgbXNnLnRleHRDb250ZW50ID0gJ1VuYWJsZSB0byBsb2FkIENWIGluZm9ybWF0aW9uLic7CiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobXNnKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgIGNvbnN0IGNvbnRhY3RUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFjdC10b2dnbGUnKTsKICAgIGNvbnN0IGNvbnRhY3RDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhY3QtY29udGVudCcpOwogICAgaWYgKGNvbnRhY3RUb2dnbGUgJiYgY29udGFjdENvbnRlbnQpIHsKICAgICAgY29udGFjdFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICBjb25zdCBpc09wZW4gPSBjb250YWN0Q29udGVudC5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7CiAgICAgICAgY29udGFjdFRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJywgaXNPcGVuKTsKICAgICAgICBjb250YWN0VG9nZ2xlLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7CiAgICAgICAgY29udGFjdENvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gaXNPcGVuID8gY29udGFjdENvbnRlbnQuc2Nyb2xsSGVpZ2h0ICsgJ3B4JyA6IDA7CiAgICAgIH0pOwogICAgfQoKICAgIGNvbnN0IHNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlY3Rpb24nKTsKICBzZWN0aW9ucy5mb3JFYWNoKHNlYyA9PiBzZWMuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJykpOwogIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4gewogICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHsKICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7CiAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsKICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIH0KICAgIH0pOwogIH0sIHsgdGhyZXNob2xkOiAwLjEgfSk7CiAgc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IG9ic2VydmVyLm9ic2VydmUoc2VjdGlvbikpOwoKICBjb25zdCBuYXZMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXYtbGlua3MgYScpOwogIGNvbnN0IG5hdlRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYXYtdG9nZ2xlJyk7CiAgY29uc3QgbmF2TGlua3NDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmF2LWxpbmtzJyk7CiAgbmF2VG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgY29uc3QgaXNPcGVuID0gbmF2TGlua3NDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpOwogICAgbmF2VG9nZ2xlLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7CiAgfSk7CiAgbmF2TGlua3MuZm9yRWFjaChsaW5rID0+CiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICBuYXZMaW5rc0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7CiAgICAgIG5hdlRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTsKICAgIH0pCiAgKTsKCiAgY29uc3Qgc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4gewogICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHsKICAgICAgY29uc3QgaWQgPSBlbnRyeS50YXJnZXQuZ2V0QXR0cmlidXRlKCdpZCcpOwogICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLm5hdi1saW5rcyBhW2hyZWY9IiMke2lkfSJdYCk7CiAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykgewogICAgICAgIG5hdkxpbmtzLmZvckVhY2gobCA9PiBsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTsKICAgICAgICBpZiAobGluaykgbGluay5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTsKICAgICAgfQogICAgfSk7CiAgfSwgeyB0aHJlc2hvbGQ6IDAuNSB9KTsKICBzZWN0aW9ucy5mb3JFYWNoKHNlY3Rpb24gPT4gc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoc2VjdGlvbikpOwoKICBjb25zdCBiYWNrVG9Ub3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFjay10by10b3AnKTsKICBjb25zdCBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzcy1iYXInKTsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4gewogICAgY29uc3Qgc2Nyb2xsVG9wID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsKICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OwogICAgY29uc3Qgc2Nyb2xsZWQgPSAoc2Nyb2xsVG9wIC8gc2Nyb2xsSGVpZ2h0KSAqIDEwMDsKICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gYCR7c2Nyb2xsZWR9JWA7CiAgICBpZiAod2luZG93LnNjcm9sbFkgPiAzMDApIHsKICAgICAgYmFja1RvVG9wLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsKICAgIH0gZWxzZSB7CiAgICAgIGJhY2tUb1RvcC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7CiAgICB9CiAgfSk7CiAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdzY3JvbGwnKSk7CiAgYmFja1RvVG9wLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiAwLCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7CiAgfSk7CgogIGNvbnN0IGNvcHlyaWdodEljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29weXJpZ2h0LWljb24nKTsKICBpZiAoY29weXJpZ2h0SWNvbikgewogICAgY29weXJpZ2h0SWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgY29weXJpZ2h0SWNvbi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTsKICAgIH0pOwogIH0KCiAgc2VjdGlvbnMuZm9yRWFjaChzZWMgPT4gewogICAgc2VjLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGUgPT4gewogICAgICBjb25zdCByZWN0ID0gc2VjLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICBjb25zdCB4ID0gKChlLmNsaWVudFggLSByZWN0LmxlZnQpIC8gcmVjdC53aWR0aCAtIDAuNSkgKiAxMDsKICAgICAgY29uc3QgeSA9IC0oKGUuY2xpZW50WSAtIHJlY3QudG9wKSAvIHJlY3QuaGVpZ2h0IC0gMC41KSAqIDEwOwogICAgICBzZWMuc3R5bGUuc2V0UHJvcGVydHkoJy0tdGlsdFgnLCBgJHt4fWRlZ2ApOwogICAgICBzZWMuc3R5bGUuc2V0UHJvcGVydHkoJy0tdGlsdFknLCBgJHt5fWRlZ2ApOwogICAgfSk7CgogICAgc2VjLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7CiAgICAgIHNlYy5zdHlsZS5zZXRQcm9wZXJ0eSgnLS10aWx0WCcsICcwZGVnJyk7CiAgICAgIHNlYy5zdHlsZS5zZXRQcm9wZXJ0eSgnLS10aWx0WScsICcwZGVnJyk7CiAgICB9KTsKICB9KTsKCiAgaW5pdENvZGVCYWNrZ3JvdW5kKCk7Cn0pOwoKZnVuY3Rpb24gcG9wdWxhdGUoZGF0YSkgewogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJykudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7CiAgY29uc3QgaGVhZGxpbmVFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkbGluZScpOwogIGNvbnN0IHN1bW1hcnlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5Jyk7CiAgdHlwZVdyaXRlcihkYXRhLmhlYWRsaW5lLCBoZWFkbGluZUVsLCAwLCAoKSA9PiB7CiAgICBoZWFkbGluZUVsLmNsYXNzTGlzdC5yZW1vdmUoJ3RhZ2xpbmUnKTsKICAgIHN1bW1hcnlFbC5jbGFzc0xpc3QuYWRkKCd0YWdsaW5lJyk7CiAgICB0eXBlV3JpdGVyKGRhdGEuc3VtbWFyeSwgc3VtbWFyeUVsLCAwLCAoKSA9PiBzdW1tYXJ5RWwuY2xhc3NMaXN0LnJlbW92ZSgndGFnbGluZScpKTsKICB9KTsKCiAgY29uc3QgY29udGFjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWN0LWNvbnRlbnQnKTsKICBjb250YWN0LnRleHRDb250ZW50ID0gJyc7CgogIGNvbnN0IHBob25lUCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICBjb25zdCBwaG9uZUxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgcGhvbmVMaW5rLmhyZWYgPSBgdGVsOiR7ZGF0YS5jb250YWN0LnBob25lfWA7CiAgcGhvbmVMaW5rLmNsYXNzTmFtZSA9ICdjb250YWN0LWxpbmsnOwogIHBob25lTGluay5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnUGhvbmUnKTsKICBjb25zdCBwaG9uZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgcGhvbmVJY29uLmNsYXNzTmFtZSA9ICdmYS1zb2xpZCBmYS1waG9uZSc7CiAgcGhvbmVMaW5rLmFwcGVuZENoaWxkKHBob25lSWNvbik7CiAgcGhvbmVMaW5rLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEuY29udGFjdC5waG9uZSkpOwogIHBob25lUC5hcHBlbmRDaGlsZChwaG9uZUxpbmspOwogIGNvbnN0IHBob25lQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgcGhvbmVCdG4uY2xhc3NOYW1lID0gJ2NvcHktYnRuJzsKICBwaG9uZUJ0bi5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29weScsIGRhdGEuY29udGFjdC5waG9uZSk7CiAgcGhvbmVCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0NvcHkgcGhvbmUnKTsKICBjb25zdCBwaG9uZUJ0bkljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgcGhvbmVCdG5JY29uLmNsYXNzTmFtZSA9ICdmYS1zb2xpZCBmYS1jb3B5JzsKICBwaG9uZUJ0bi5hcHBlbmRDaGlsZChwaG9uZUJ0bkljb24pOwogIHBob25lUC5hcHBlbmRDaGlsZChwaG9uZUJ0bik7CiAgY29udGFjdC5hcHBlbmRDaGlsZChwaG9uZVApOwoKICBjb25zdCBlbWFpbFAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7CiAgY29uc3QgZW1haWxMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIGVtYWlsTGluay5ocmVmID0gYG1haWx0bzoke2RhdGEuY29udGFjdC5lbWFpbH1gOwogIGVtYWlsTGluay5jbGFzc05hbWUgPSAnY29udGFjdC1saW5rJzsKICBlbWFpbExpbmsuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0VtYWlsJyk7CiAgY29uc3QgZW1haWxJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpOwogIGVtYWlsSWNvbi5jbGFzc05hbWUgPSAnZmEtc29saWQgZmEtZW52ZWxvcGUnOwogIGVtYWlsTGluay5hcHBlbmRDaGlsZChlbWFpbEljb24pOwogIGVtYWlsTGluay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhLmNvbnRhY3QuZW1haWwpKTsKICBlbWFpbFAuYXBwZW5kQ2hpbGQoZW1haWxMaW5rKTsKICBjb25zdCBlbWFpbEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGVtYWlsQnRuLmNsYXNzTmFtZSA9ICdjb3B5LWJ0bic7CiAgZW1haWxCdG4uc2V0QXR0cmlidXRlKCdkYXRhLWNvcHknLCBkYXRhLmNvbnRhY3QuZW1haWwpOwogIGVtYWlsQnRuLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdDb3B5IGVtYWlsJyk7CiAgY29uc3QgZW1haWxCdG5JY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpOwogIGVtYWlsQnRuSWNvbi5jbGFzc05hbWUgPSAnZmEtc29saWQgZmEtY29weSc7CiAgZW1haWxCdG4uYXBwZW5kQ2hpbGQoZW1haWxCdG5JY29uKTsKICBlbWFpbFAuYXBwZW5kQ2hpbGQoZW1haWxCdG4pOwogIGNvbnRhY3QuYXBwZW5kQ2hpbGQoZW1haWxQKTsKCiAgY29uc3QgbG9jUCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICBjb25zdCBsb2NMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIGxvY0xpbmsuaHJlZiA9IGBodHRwczovL21hcHMuZ29vZ2xlLmNvbS8/cT0ke2VuY29kZVVSSUNvbXBvbmVudChkYXRhLmNvbnRhY3QubG9jYXRpb24pfWA7CiAgbG9jTGluay5jbGFzc05hbWUgPSAnY29udGFjdC1saW5rJzsKICBsb2NMaW5rLnRhcmdldCA9ICdfYmxhbmsnOwogIGxvY0xpbmsucmVsID0gJ25vb3BlbmVyJzsKICBsb2NMaW5rLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdMb2NhdGlvbicpOwogIGNvbnN0IGxvY0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgbG9jSWNvbi5jbGFzc05hbWUgPSAnZmEtc29saWQgZmEtbG9jYXRpb24tZG90JzsKICBsb2NMaW5rLmFwcGVuZENoaWxkKGxvY0ljb24pOwogIGxvY0xpbmsuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YS5jb250YWN0LmxvY2F0aW9uKSk7CiAgbG9jUC5hcHBlbmRDaGlsZChsb2NMaW5rKTsKICBjb250YWN0LmFwcGVuZENoaWxkKGxvY1ApOwoKICBkYXRhLmNvbnRhY3QucHJvZmlsZXMuZm9yRWFjaChwID0+IHsKICAgIGNvbnN0IHBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICBhLmhyZWYgPSBwLnVybDsKICAgIGEuY2xhc3NOYW1lID0gJ2NvbnRhY3QtbGluayc7CiAgICBhLnRhcmdldCA9ICdfYmxhbmsnOwogICAgYS5yZWwgPSAnbm9vcGVuZXInOwogICAgYS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBwLnNpdGUpOwogICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTsKICAgIGNvbnN0IGljb25DbGFzcyA9IHByb2ZpbGVJY29uc1twLnNpdGVdIHx8ICdmYS1zb2xpZCBmYS1saW5rJzsKICAgIGljb24uY2xhc3NOYW1lID0gaWNvbkNsYXNzOwogICAgYS5hcHBlbmRDaGlsZChpY29uKTsKICAgIGEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocC5zaXRlKSk7CiAgICBwRWwuYXBwZW5kQ2hpbGQoYSk7CiAgICBjb250YWN0LmFwcGVuZENoaWxkKHBFbCk7CiAgfSk7CgogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvcHktYnRuJykuZm9yRWFjaChidG4gPT4gewogICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgY29uc3QgdmFsdWUgPSBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLWNvcHknKTsKICAgICAgICBjb25zdCBpY29uID0gYnRuLnF1ZXJ5U2VsZWN0b3IoJ2knKTsKICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGljb24uY2xhc3NOYW1lOwogICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHZhbHVlKS50aGVuKCgpID0+IHsKICAgICAgICAgIGljb24uY2xhc3NOYW1lID0gJ2ZhLXNvbGlkIGZhLWNoZWNrJzsKICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICBpY29uLmNsYXNzTmFtZSA9IG9yaWdpbmFsOwogICAgICAgICAgfSwgMjAwMCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CgogICAgaWYgKGNvbnRhY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykpIHsKICAgICAgY29udGFjdC5zdHlsZS5tYXhIZWlnaHQgPSBjb250YWN0LnNjcm9sbEhlaWdodCArICdweCc7CiAgICB9CgogIGNvbnN0IHNraWxscyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdza2lsbHMtbGlzdCcpOwogIGRhdGEuc2tpbGxzLmZvckVhY2gocyA9PiB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpOwogICAgaWNvbi5jbGFzc05hbWUgPSBnZXRTa2lsbEljb24ocyk7CiAgICBsaS5hcHBlbmRDaGlsZChpY29uKTsKICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGAgJHtzfWApKTsKICAgIHNraWxscy5hcHBlbmRDaGlsZChsaSk7CiAgfSk7CgogIGNvbnN0IGxhbmd1YWdlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsYW5ndWFnZXMtbGlzdCcpOwogIGRhdGEubGFuZ3VhZ2VzLmZvckVhY2gobGFuZyA9PiB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS50ZXh0Q29udGVudCA9IGAke2xhbmcubGFuZ3VhZ2V9ICgke2xhbmcucHJvZmljaWVuY3l9KWA7CiAgICBsYW5ndWFnZXMuYXBwZW5kQ2hpbGQobGkpOwogIH0pOwoKICBjb25zdCBlZHUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWR1Y2F0aW9uLWNvbnRlbnQnKTsKICBkYXRhLmVkdWNhdGlvbi5mb3JFYWNoKGl0ZW0gPT4gewogICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnZW50cnknKTsKCiAgICBjb25zdCBoMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7CiAgICBjb25zdCBncmFkSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTsKICAgIGdyYWRJY29uLmNsYXNzTmFtZSA9ICdmYS1zb2xpZCBmYS1ncmFkdWF0aW9uLWNhcCc7CiAgICBoMy5hcHBlbmRDaGlsZChncmFkSWNvbik7CiAgICBoMy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgICR7aXRlbS5kZWdyZWV9YCkpOwogICAgZGl2LmFwcGVuZENoaWxkKGgzKTsKCiAgICBjb25zdCBwZXJpb2RQID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOwogICAgcGVyaW9kUC50ZXh0Q29udGVudCA9IGAke2l0ZW0uaW5zdGl0dXRpb259ICgke2l0ZW0uc3RhcnRfZGF0ZX0g4oCTICR7aXRlbS5lbmRfZGF0ZX0pYDsKICAgIGRpdi5hcHBlbmRDaGlsZChwZXJpb2RQKTsKCiAgICBpZiAoaXRlbS5ncGEpIHsKICAgICAgY29uc3QgZ3BhUCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICAgICAgZ3BhUC50ZXh0Q29udGVudCA9IGBHUEE6ICR7aXRlbS5ncGF9YDsKICAgICAgZGl2LmFwcGVuZENoaWxkKGdwYVApOwogICAgfQoKICAgIGlmIChpdGVtLm5vdGVzICYmIGl0ZW0ubm90ZXMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTsKICAgICAgaXRlbS5ub3Rlcy5mb3JFYWNoKG4gPT4gewogICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgICAgICBsaS50ZXh0Q29udGVudCA9IG47CiAgICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpOwogICAgICB9KTsKICAgICAgZGl2LmFwcGVuZENoaWxkKHVsKTsKICAgIH0KICAgIGVkdS5hcHBlbmRDaGlsZChkaXYpOwogIH0pOwoKICBjb25zdCBleHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwZXJpZW5jZS1jb250ZW50Jyk7CiAgZGF0YS53b3JrX2V4cGVyaWVuY2UuZm9yRWFjaChqb2IgPT4gewogICAgaWYgKGpvYi5yb2xlcykgewogICAgICBqb2Iucm9sZXMuZm9yRWFjaChyb2xlID0+IGV4cC5hcHBlbmRDaGlsZChidWlsZEpvYihyb2xlLCBqb2IuY29tcGFueSkpKTsKICAgIH0gZWxzZSB7CiAgICAgIGV4cC5hcHBlbmRDaGlsZChidWlsZEpvYihqb2IsIGpvYi5jb21wYW55KSk7CiAgICB9CiAgfSk7CgogIGNvbnN0IHByb2plY3RzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RzLWNvbnRlbnQnKTsKICBPYmplY3QuZW50cmllcyhkYXRhLnByb2plY3RzKS5mb3JFYWNoKChbY2F0LCBpdGVtc10pID0+IHsKICAgIGNvbnN0IGgzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTsKICAgIGgzLnRleHRDb250ZW50ID0gdGl0bGVDYXNlKGNhdC5yZXBsYWNlKC9fL2csICcgJykpOwogICAgcHJvamVjdHMuYXBwZW5kQ2hpbGQoaDMpOwogICAgY29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpOwogICAgaXRlbXMuZm9yRWFjaChpdCA9PiB7CiAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgICAgbGkudGV4dENvbnRlbnQgPSBpdDsKICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpOwogICAgfSk7CiAgICBwcm9qZWN0cy5hcHBlbmRDaGlsZCh1bCk7CiAgfSk7CgogIGNvbnN0IHB1YmxpY2F0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwdWJsaWNhdGlvbnMtbGlzdCcpOwogIGRhdGEucHVibGljYXRpb25zLmZvckVhY2gocHViID0+IHsKICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgIGNvbnN0IHN0cm9uZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpOwogICAgc3Ryb25nLnRleHRDb250ZW50ID0gcHViLnRpdGxlOwogICAgbGkuYXBwZW5kQ2hpbGQoc3Ryb25nKTsKICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcsICcpKTsKICAgIGNvbnN0IGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZW0nKTsKICAgIGVtLnRleHRDb250ZW50ID0gcHViLnZlbnVlOwogICAgbGkuYXBwZW5kQ2hpbGQoZW0pOwogICAgbGkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCAoJHtwdWIuZGF0ZX0pYCkpOwogICAgcHVibGljYXRpb25zLmFwcGVuZENoaWxkKGxpKTsKICB9KTsKCiAgY29uc3QgY2VydHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2VydGlmaWNhdGlvbnMtbGlzdCcpOwogIGRhdGEuY2VydGlmaWNhdGlvbnNfdHJhaW5pbmcuZm9yRWFjaChjID0+IHsKICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgIGxpLnRleHRDb250ZW50ID0gYzsKICAgIGNlcnRzLmFwcGVuZENoaWxkKGxpKTsKICB9KTsKCiAgY29uc3QgYWNoaWV2ZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjaGlldmVtZW50cy1saXN0Jyk7CiAgZGF0YS5hY2hpZXZlbWVudHMuZm9yRWFjaChhID0+IHsKICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgIGxpLnRleHRDb250ZW50ID0gYTsKICAgIGFjaGlldmVtZW50cy5hcHBlbmRDaGlsZChsaSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGJ1aWxkSm9iKHJvbGUsIGNvbXBhbnkpIHsKICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBkaXYuY2xhc3NMaXN0LmFkZCgnZW50cnknKTsKCiAgY29uc3QgaDMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpOwogIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgaWNvbi5jbGFzc05hbWUgPSBnZXRSb2xlSWNvbihyb2xlLnRpdGxlKTsKICBoMy5hcHBlbmRDaGlsZChpY29uKTsKICBoMy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgICR7cm9sZS50aXRsZX0g4oCUICR7Y29tcGFueX1gKSk7CiAgZGl2LmFwcGVuZENoaWxkKGgzKTsKCiAgY29uc3QgcGVyaW9kUCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICBwZXJpb2RQLmNsYXNzTGlzdC5hZGQoJ3BlcmlvZCcpOwogIHBlcmlvZFAudGV4dENvbnRlbnQgPSBmb3JtYXRQZXJpb2Qocm9sZS5zdGFydF9kYXRlLCByb2xlLmVuZF9kYXRlKTsKICBkaXYuYXBwZW5kQ2hpbGQocGVyaW9kUCk7CgogIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTsKICByb2xlLmhpZ2hsaWdodHMuZm9yRWFjaChoID0+IHsKICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgIGxpLnRleHRDb250ZW50ID0gaDsKICAgIHVsLmFwcGVuZENoaWxkKGxpKTsKICB9KTsKICBkaXYuYXBwZW5kQ2hpbGQodWwpOwogIHJldHVybiBkaXY7Cn0KCmZ1bmN0aW9uIGZvcm1hdFBlcmlvZChzdGFydCwgZW5kKSB7CiAgY29uc3QgZm9ybWF0dGVkRW5kID0gZW5kICYmIGVuZC50b0xvd2VyQ2FzZSgpICE9PSAncHJlc2VudCcgPyBlbmQgOiAnUHJlc2VudCc7CiAgcmV0dXJuIGAke3N0YXJ0fSDigJMgJHtmb3JtYXR0ZWRFbmR9YDsKfQoKZnVuY3Rpb24gdGl0bGVDYXNlKHN0cikgewogIHJldHVybiBzdHIucmVwbGFjZSgvXHcrL2csIHcgPT4gd1swXS50b1VwcGVyQ2FzZSgpICsgdy5zbGljZSgxKSk7Cn0KCmZ1bmN0aW9uIHR5cGVXcml0ZXIodGV4dCwgZWwsIGkgPSAwLCBkb25lKSB7CiAgaWYgKGkgPCB0ZXh0Lmxlbmd0aCkgewogICAgZWwudGV4dENvbnRlbnQgKz0gdGV4dC5jaGFyQXQoaSk7CiAgICBzZXRUaW1lb3V0KCgpID0+IHR5cGVXcml0ZXIodGV4dCwgZWwsIGkgKyAxLCBkb25lKSwgMTAwKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBkb25lID09PSAnZnVuY3Rpb24nKSB7CiAgICBkb25lKCk7CiAgfQp9CgpmdW5jdGlvbiBpbml0TWF0cml4KGlkKSB7CiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOwogIGlmICghY2FudmFzKSByZXR1cm47CiAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgY29uc3QgZm9udFNpemUgPSAxMDsKICBsZXQgY29sdW1ucyA9IDA7CiAgbGV0IGRyb3BzID0gW107CiAgY29uc3QgbGV0dGVycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicucmVwZWF0KDYpLnNwbGl0KCcnKTsKCiAgZnVuY3Rpb24gcmVzaXplKCkgewogICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDsKICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5vZmZzZXRXaWR0aDsKICAgIGNvbHVtbnMgPSBNYXRoLmZsb29yKGNhbnZhcy53aWR0aCAvIGZvbnRTaXplKTsKICAgIGRyb3BzID0gbmV3IEFycmF5KGNvbHVtbnMpLmZpbGwoMSk7CiAgICBjdHguZm9udCA9IGZvbnRTaXplICsgJ3B4IG1vbm9zcGFjZSc7CiAgfQoKICBmdW5jdGlvbiBkcmF3KCkgewogICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuMSknOwogICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHRleHQgPSBsZXR0ZXJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxldHRlcnMubGVuZ3RoKV07CiAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzBmMCc7CiAgICAgIGN0eC5maWxsVGV4dCh0ZXh0LCBpICogZm9udFNpemUsIGRyb3BzW2ldICogZm9udFNpemUpOwogICAgICBkcm9wc1tpXSsrOwogICAgICBpZiAoZHJvcHNbaV0gKiBmb250U2l6ZSA+IGNhbnZhcy5oZWlnaHQgJiYgTWF0aC5yYW5kb20oKSA+IDAuOTUpIHsKICAgICAgICBkcm9wc1tpXSA9IDA7CiAgICAgIH0KICAgIH0KICB9CgogIHJlc2l6ZSgpOwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemUpOwogIHNldEludGVydmFsKGRyYXcsIDMzKTsKfQoKZnVuY3Rpb24gaW5pdENvZGVCYWNrZ3JvdW5kKCkgewogIGNvbnN0IHNuaXBwZXRzID0gWwogICAgJ2NvbnN0IHggPSA0MjsnLAogICAgJ2NvbnNvbGUubG9nKCJIZWxsbywgd29ybGQhIik7JywKICAgICdmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHsgfScsCiAgICAnaWYgKHZhbHVlKSB7XG4gIGRvU29tZXRoaW5nKCk7XG59JywKICAgICdsZXQgc3VtID0gKGEsIGIpID0+IGEgKyBiOycKICBdOwogIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uJykuZm9yRWFjaChzZWN0aW9uID0+IHsKICAgIGNvbnN0IGJnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBiZy5jbGFzc05hbWUgPSAnY29kZS1iZyc7CiAgICBzZWN0aW9uLmFwcGVuZENoaWxkKGJnKTsKCiAgICBmdW5jdGlvbiBjeWNsZSgpIHsKICAgICAgY29uc3Qgc25pcHBldCA9IHNuaXBwZXRzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNuaXBwZXRzLmxlbmd0aCldOwogICAgICBiZy50ZXh0Q29udGVudCA9ICcnOwogICAgICBiZy5zdHlsZS5vcGFjaXR5ID0gMC4yOwogICAgICBiZy5zdHlsZS50b3AgPSBgJHtNYXRoLnJhbmRvbSgpICogODAgKyAxMH0lYDsKICAgICAgYmcuc3R5bGUubGVmdCA9IGAke01hdGgucmFuZG9tKCkgKiA4MCArIDEwfSVgOwogICAgICB0eXBlV3JpdGVyKHNuaXBwZXQsIGJnLCAwLCAoKSA9PiB7CiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICBiZy5zdHlsZS5vcGFjaXR5ID0gMDsKICAgICAgICAgIHNldFRpbWVvdXQoY3ljbGUsIDEwMDApOwogICAgICAgIH0sIDIwMDApOwogICAgICB9KTsKICAgIH0KCiAgICBjeWNsZSgpOwogIH0pOwp9Cg=='), c => c.charCodeAt(0));
const jsCode = new TextDecoder().decode(jsBytes);
eval(jsCode);
